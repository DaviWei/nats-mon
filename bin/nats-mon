#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nats-mon:server');
var http = require('http');
var program = require('commander');
var pkgjson = require('../package.json');

/**
 * Get server address and port from environment and store in Express.
 */
var server_address = process.env.NATSMON_SERVER_ADDRESS ||Â 'localhost';
app.set('server_address', server_address);
var server_port = normalizePort(process.env.NATSMON_SERVER_PORT || '3000');
app.set('server_port', server_port);

/*
 * Get server address and port from falgs and override store in Express.
 */
program.version(pkgjson.version)
  .option('--server-address [address]', 'Server address', server_address)
  .option('--server-port [port]', 'Server port', server_port)
  .parse(process.argv);

if (program.serverAddress) {
  app.set('server_address', program.serverAddress);
}

if (program.serverPort) {
  app.set('server_port', program.serverPort);
}

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
console.log("nats-mon Listening at http://" + app.get('server_address') + ':' + app.get('server_port') + '...');
server.listen(app.get('server_port'), app.get('server_address'));
server.on('error', onError);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}
